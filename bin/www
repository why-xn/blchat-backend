#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('blchat-backend:server');
var http = require('http');
var db = require('../db/adapter/mongo');
var { GroupChat, ChatMessage } = require('../db/model/models');
const jwt = require("jsonwebtoken");
var cors = require('cors');
require("dotenv").config();
const { 
  v4: uuidv4,
} = require('uuid');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.use('*', cors());


/**
 * Create HTTP server.
 */

var server = http.Server(app);
var io = require('socket.io')(server, {
  cors: {
    origin: "*",
    methods: ["*"]
  }
});
const config = process.env;

io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  try {
    const decoded = jwt.verify(token, config.TOKEN_KEY);
    socket.user = decoded;
    next();
  } catch (err) {
    err = new Error("not authorized");
    err.data = { msg: "invalid token" }; 
    next(err);
  }
});

io.on('connection', (socket) => {
  if (!socket.user) {
    setTimeout(() => {
      socket.disconnect();
    }, 500);
  } else {
    console.log('User: ' + socket.user.username + ' just connected. Socket ID: ' + socket.id);
    // join new room
    socket.on('join', async function (publicGroupChatId) {
      var publicGroupChat = await GroupChat.findOne({_id: publicGroupChatId, mode: 'PUBLIC', status: 'V'});
      if (publicGroupChat) {
        socket.join(publicGroupChatId);
        //saveChatMessage(publicGroupChatId, 'GROUP', socket.user.username + ' just joined the room!', 'server', 'Server');
        io.to(publicGroupChatId).emit("msg-channel", {code: 'GROUP_CHAT_ANNOUNCEMENT', chatId: publicGroupChatId, msg: socket.user.username + ' just joined the room!', senderId: 'server', senderDisplayName: 'Server'});
      } else {
        //socket.broadcast.to(socket.id).emit( "msg-channel", {type: 'JOIN_GROUP_CHAT_FAILED', data: publicGroupChat, msg: 'Group Chat not found'} );
        socket.emit("msg-channel", {code: 'JOIN_GROUP_CHAT_FAILED', chatId: publicGroupChatId, msg: 'Group Chat not found'});
      }
    });

    socket.on('leave', async function (publicGroupChatId) {
      var publicGroupChat = await GroupChat.findOne({_id: publicGroupChatId, mode: 'PUBLIC', status: 'V'});
      if (publicGroupChat) {
        socket.leave(publicGroupChatId);
        //saveChatMessage(publicGroupChatId, 'GROUP', socket.user.username + ' just left the room!', 'server', 'Server');
        io.to(publicGroupChatId).emit("msg-channel", {code: 'GROUP_CHAT_ANNOUNCEMENT', chatId: publicGroupChatId, msg: socket.user.username + ' just left the room!', senderId: 'server', senderDisplayName: 'Server'});
      } else {
        //socket.broadcast.to(socket.id).emit( "msg-channel", {type: 'JOIN_GROUP_CHAT_FAILED', data: publicGroupChat, msg: 'Group Chat not found'} );
        socket.emit("msg-channel", {code: 'LEAVE_GROUP_CHAT_FAILED', chatId: publicGroupChatId, msg: 'Group Chat not found'});
      }
    });

    socket.on('msg-channel', async incomingData => {
      console.log(incomingData);
      const chatMsg = await saveChatMessage(incomingData.chatId, incomingData.chatType, incomingData.msg, socket.user.userId, socket.user.username);
      io.to(incomingData.chatId).emit("msg-channel", {
        code: 'NEW_CHAT_MSG',
        chatId: incomingData.chatId, 
        msgId: chatMsg._id,
        msg: incomingData.msg,
        senderId: socket.user.userId, 
        senderDisplayName: socket.user.username
      });
    });
  }
});


async function saveChatMessage (chatId, chatType, msg, senderId, senderDisplayName) {
  const newMessage = new ChatMessage({
    _id: uuidv4(),
    chatId: chatId,
    chatType: chatType,
    msg: msg,
    senderId: senderId,
    senderDisplayName: senderDisplayName,
    status: 'V',
    createDate: new Date()
  });
  await newMessage.save();
  return newMessage;
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Socket.IO server running at http://localhost:${port}/`);
  db.initConnection();
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

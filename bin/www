#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('blchat-backend:server');
var http = require('http');
var db = require('../db/adapter/mongo');
var cache = require("../cache/redis");
var cors = require('cors');
var bcrypt = require('bcryptjs');
var { User, GroupChatParticipant, GroupChatActiveUserSocket } = require('../db/model/models');
const { 
  v4: uuidv4,
} = require('uuid');
require("dotenv").config();
var sio = require("../socket.io/socket");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.use('*', cors());


/**
 * Create HTTP server.
 */

var server = http.Server(app);

/**
 * Init Socket.IO Server
 */
sio.init(server);


async function createInitAdminUser() {
  const admin = await User.findOne({ username: process.env.ADMIN_USERNAME, status: 'V'});
  if (!admin) {
    console.log('Admin user not found. Creating one....');
    
    const encryptedPassword = await bcrypt.hash(process.env.ADMIN_PASSWORD, 10);

    // Create user in our database
    await User.create({
      id: uuidv4(),
      displayName: 'System Admin',
      username: process.env.ADMIN_USERNAME,
      password: encryptedPassword,
      role: 'ADMIN',
      status: 'V',
      createDate: new Date().toLocaleString("en-US", {timeZone: "Asia/Dhaka"})
    });
  }
}

async function clearAllGroupChatActiveUserSockets() {
  try {
    console.log('[INFO] Clearing all Group Chat Active User Sockets');
    await GroupChatActiveUserSocket.remove();
  } catch(err) {
    console.log('Error occurred while clearing all group chat active user sockets.', err);
  }
}

async function clearAllGroupParticipants() {
  try {
    console.log('[INFO] Clearing all Group Chat Participants');
    await GroupChatParticipant.updateMany({}, { $set: { "participant.activeConnections": 0 }});
  } catch(err) {
    console.log('Error occurred while clearing all group participants.', err);
  }
}

async function resetAllUserActiveConnections() {
  try {
    console.log('[INFO] Resetting all User Active Connections');
    await User.updateMany({}, { $set: { activeConnections: 0 }});
  } catch(err) {
    console.log('Error occurred while resetting all user active connections.', err);
  }
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, async () => {
  console.log(`Socket.IO server running at http://localhost:${port}/`);
  db.initConnection();
  cache.initConnection();
  createInitAdminUser();
  clearAllGroupChatActiveUserSockets();
  clearAllGroupParticipants();
  resetAllUserActiveConnections();
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}